def read_fasta_file(file): #чтение файла фаста
    sequences = []
    with open(file) as f:
        seq = ""
        for line in f:
            if line.startswith(">"): #Ищем строку нач с >
                if seq:
                    sequences.append(seq)
                seq = ""
            else:
                seq += line.strip() #если нет продолжаем читать и соед с обр строкой
        if seq:
            sequences.append(seq) #добавляем в конец списка
    return sequences


def translate(seq): #ДНК -> АК
    table = {"TTT": "F", "CTT": "L", "ATT": "I", "GTT": "V", "TTC": "F", "CTC": "L", "ATC": "I", "GTC": "V",
     "TTA": "L", "CTA": "L", "ATA": "I", "GTA": "V", "TTG": "L", "CTG": "L", "ATG": "M", "GTG": "V",
     "TCT": "S", "CCT": "P", "ACT": "T", "GCT": "A", "TCC": "S", "CCC": "P", "ACC": "T", "GCC": "A",
     "TCA": "S", "CCA": "P", "ACA": "T", "GCA": "A", "TCG": "S", "CCG": "P", "ACG": "T", "GCG": "A",
     "TAT": "Y", "CAT": "H", "AAT": "N", "GAT": "D", "TAC": "Y", "CAC": "H", "AAC": "N", "GAC": "D",
     "TAA": "", "CAA": "Q", "AAA": "K", "GAA": "E", "TAG": "", "CAG": "Q", "AAG": "K", "GAG": "E",
     "TGT": "C", "CGT": "R", "AGT": "S", "GGT": "G", "TGC": "C", "CGC": "R", "AGC": "S", "GGC": "G",
     "TGA": "", "CGA": "R", "AGA": "R", "GGA": "G", "TGG": "W", "CGG": "R", "AGG": "R", "GGG": "G"}
    protein = ""
    for i in range(0, len(seq), 3):
        codon = seq[i:i + 3]
        protein += table[codon]
    return protein


def reverse_complement(seq): #Комплиментарная цепь ДНК
    complement = {"A": "T", "C": "G", "G": "C", "T": "A"}
    return "".join(complement[base] for base in reversed(seq))


def find_orfs(seq):
    orfs = []
    start_codon = "ATG"
    stop_codons = ["TAA", "TAG", "TGA"]
    for frame in range(3): # Переворачиваем последовательность, если frame = 2
        if frame == 2:
            reverse_seq = reverse_complement(seq)
            codons = [reverse_seq[i:i + 3] for i in range(frame, len(seq) - 2, 3)]
        else:
            codons = [seq[i:i + 3] for i in range(frame, len(seq) - 2, 3)]
        orf_started = False
        orf_start = None
        for i, codon in enumerate(codons):
            if codon == start_codon:
                if not orf_started:
                    orf_started = True
                    orf_start = i * 3 + frame
            elif codon in stop_codons:
                if orf_started:
                    orfs.append((orf_start, i * 3 + frame + 2))
                    orf_started = False
        if orf_started:
            orfs.append((orf_start, len(seq) - 1))
    return orfs


def main():
    fasta_file = "/home/user/29482948.fasta"  #  путь к файлу fasta
    sequences = read_fasta_file(fasta_file) # Читаем fasta -> ДНК
    output_dir = "/home/user/qq" # Для  ДНК ищем рамки считывания и записываем белки в файлы
    for i, seq in enumerate(sequences):
        orfs = find_orfs(seq)
        for start, stop in orfs:
            protein = translate(seq[start:stop + 1])
            protein_file = f"{output_dir}/protein_{i + 1}_{start + 1}_{stop + 1}.fasta"
            with open(protein_file, "w") as f:
                f.write(f">protein_{i + 1}_{start + 1}_{stop + 1}\n{protein}\n")


if __name__ == "__main__":
    main()
